使用docker构建镜像参考：http://note.youdao.com/noteshare?id=7bfa23628af2bfac43c605a9e03a47a2
linux 服务器已经安装了docker服务（省略）
linux 服务器上的修改文件
vim /lib/systemd/system/docker.service
#修改ExecStart这行
    ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock

firewalld 防火墙中添加协议服务，端口过滤
netstat -anp | grep 你的端口号 ( 若未安装，则执行 yum install net-tools)

firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=tcp
firewall-cmd --permanent --add-port=2375/tcp

查看打开了哪些服务
firewall-cmd --list-services
查看可以打开哪些服务
firewall-cmd --get-services


maven的settings.xml配置
<server>
    <id>docker-hub</id>
    <username>txtxw</username>
    <password>XXXXXX</password>
    <configuration>
        <email>txtxw@163.com</email>
    </configuration>
 </server>


-- 基于Dockerfile文件来生成镜像
pom.xml配置 文件中用docker-maven-plugin 结合spring-boot-maven-plugin、maven-war-plugin、maven-assembly-plugin一起来使用等

<plugin>
	<groupId>com.spotify</groupId>
	<artifactId>docker-maven-plugin</artifactId>
	<configuration>
		<!-- 镜像名称 注意命令方式以${dockerId}/开始 -->
		<imageName>txtxw/${project.name}:${project.version}</imageName>
		<!-- Dockerfile 文件目录 -->
		<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
		<!-- 是否跳过docker构建 -->
		<skipDockerBuild>false</skipDockerBuild>
		<!-- 服务ID -->
		<serverId>docker-hub</serverId>
		<!-- 镜像注册地址 -->
		<registryUrl>https://index.docker.io/v1/</registryUrl>
		<!-- docker服务器主机地址 -->
		<dockerHost>http://192.168.190.180:2375</dockerHost>
		<!--docker 证书路径
		<dockerCertPath>docker</dockerCertPath>-->
		<!-- 告诉docker服务暴露的端口
		<exposes>18888</exposes>-->
		<resources>
			<resource>
				<!-- 根目录路径下 -->
				<targetPath>/</targetPath>
				<!--用于指定需要复制的根目录，${project.build.directory}表示target目录-->
				<directory>${project.build.directory}</directory>
				<!--用于指定需要复制的文件。${project.build.finalName}.jar指的是打包后的jar包文件。-->
				<include>${project.build.finalName}.jar</include>
			</resource>
		</resources>
	</configuration>
</plugin>


--不基于Dockerfile 文件来生成镜像
<plugin>
	<groupId>com.spotify</groupId>
	<artifactId>docker-maven-plugin</artifactId>
	<configuration>
		<serverId>docker-hub</serverId>
		<dockerHost>http://192.168.190.180:2375</dockerHost>
		<!-- 镜像公共的注册地址 -->
		<registryUrl>https://index.docker.io/v1/</registryUrl>
		<baseImage>txtxw/java</baseImage>
		<imageName>txtxw/${project.name}:${project.version}</imageName>
		<forceTags>true</forceTags>
		<maintainer>txtxw txtxw@163.com</maintainer>
		<volumes>
			<volume>/tmp</volume>
		</volumes>
		<workdir>/data0/java</workdir>
		<exposes>18888</exposes>
		<cmd>["java","-version"]</cmd>
		<entryPoint>["java","-Djava.security.egd=file:/dev/urandom","-jar","${project.build.finalName}.jar"]</entryPoint>
		<resources>
			<resource>
				<!-- 执行目标工作目录 -->
				<targetPath>/data0/java</targetPath>
				<!--用于指定需要复制的根目录，${project.build.directory}表示target目录-->
				<directory>${project.build.directory}</directory>
				<!--用于指定需要复制的文件。${project.build.finalName}.jar指的是打包后的jar包文件。-->
				<include>${project.build.finalName}.jar</include>
			</resource>
		</resources>
	</configuration>
</plugin>


在intelij终端demo-sample107目录下执行docker构建的命令
mvn clean package docker:build -DpushImage -DskipTests

-DpushImage   上传镜像
-DpushImageTag=latest  指定上传镜像版本

-DskipDockerBuild 跳过 build 镜像
-DskipDockerTag 跳过 tag 镜像
-DskipDockerPush 跳过 push 镜像
-DskipDocker 跳过整个阶段
-DskipTests 跳过测试


执行完了上面镜像构建以及推送
在linux服务器中查看镜像列表，可以确认
docker images

在linux服务器中运行镜像
docker run -d -p 18888:18888 txtxw/demo-sample107:0.0.1


docker  推送镜像，支持3种认证方式

1.读取本地配置文件，自动认证
从1.0.0版本之后，docker-maven-plugin插件会自动读取到docker-cli的认证配置，默认在~/.dockercfg 和~/.docker/config.json，而无需额外的配置

2.GCR认证
如果本机配置DOCKER_GOOGLE_CREDENTIALS的环境变量，则会使用GCR认证。

3.Server认证
也可以在maven的settings.xml配置认证信息：
<servers>
  <server>
    <id>docker-hub</id>
    <username>foo</username>
    <password>secret-password</password>
    <configuration>
      <email>foo@foo.bar</email>
    </configuration>
  </server>
</servers>

在pom.xml则通过如下配置关联上述server id
<plugins>
  <plugin>
    <groupId>com.spotify</groupId>
    <artifactId>docker-maven-plugin</artifactId>
    <version>VERSION GOES HERE</version>
    <configuration>
      [...]
      <serverId>docker-hub</serverId>
      <registryUrl>https://index.docker.io/v1/</registryUrl>
    </configuration>
  </plugin>
</plugins>


使用maven 对密码加密(保持1,3步骤原密文一致)，加密2个命令
mvn --encrypt-master-password <password>
mvn --encrypt-password <password>

第1步执行shell：
mvn --encrypt-master-password  "XXXXXX"
{nDpn1bE1vX4HABCDEFGOriBubJhppqAOuy4=}

第2步执行shell，创建~/.m2/settings-security.xml
<settingsSecurity>
    <master>{nDpn1bE1vX4HABCDEFGOriBubJhppqAOuy4=}</master>
</settingsSecurity>

第3步执行shell：
mvn --encrypt-password  "XXXXXX"
{X/Mnlwkfm90HVsaddbsadsadlsakdsalfdlfdhfldsfldslE3LQ8g4=}


第4步写入~/.m2/settings.xml （maven工程指定的settings.xml文件即可）
<settings>
    <servers>
        <server>
            <id>docker-hub</id>
            <username>txtxw</username>
            <password>{X/Mnlwkfm90HVsaddbsadsadlsakdsalfdlfdhfldsfldslE3LQ8g4=}</password>
        </server>
    </servers>
</settings>
