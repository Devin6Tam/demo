<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.mzbloc.demo.sample108</groupId>
		<artifactId>demo-sample108</artifactId>
		<version>0.0.1</version>
	</parent>
	<groupId>com.mzbloc.demo.sample108.discovery</groupId>
	<artifactId>discovery</artifactId>
	<version>0.0.1</version>
	<name>discovery</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		<start-class>com.mzbloc.demo.sample108.discovery.DiscoveryApplication</start-class>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk15on</artifactId>
			<version>1.55</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!--<plugin>-->
				<!--<groupId>org.springframework.boot</groupId>-->
				<!--<artifactId>spring-boot-maven-plugin</artifactId>-->
			<!--</plugin>-->

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<!-- 镜像名称 注意命令方式以${dockerId}/开始 -->
					<imageName>txtxw/${project.name}:${project.version}</imageName>
					<!-- Dockerfile 文件目录 -->
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<!-- 是否跳过docker构建 -->
					<skipDockerBuild>false</skipDockerBuild>
					<!-- 服务ID -->
					<serverId>docker-hub</serverId>
					<!-- 镜像注册地址 -->
					<registryUrl>https://index.docker.io/v1/</registryUrl>
					<!-- docker服务器主机地址 -->
					<dockerHost>http://192.168.190.180:2375</dockerHost>
					<!--docker 证书路径
                    <dockerCertPath>docker</dockerCertPath>-->
					<!-- 告诉docker服务暴露的端口
                    <exposes>18888</exposes>-->
					<resources>
						<resource>
							<!-- 根目录路径下 -->
							<targetPath>/</targetPath>
							<!--用于指定需要复制的根目录，${project.build.directory}表示target目录-->
							<directory>${project.build.directory}</directory>
							<!--用于指定需要复制的文件。${project.build.finalName}.jar指的是打包后的jar包文件。-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
